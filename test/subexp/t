# poly!
fn[A](x : A) { x }
> fn [A](x: A) { x }
>   fn [A](x: A) -> A { x }
> [A] (A) -> A

fn[A,B](id : [A](A) -> A, (x,y):(A, B)) { (id(y),id(x)) }
> fn [A, B](id: [A] (A) -> A, (x, y): (A, B)) { (id(y), id(x)) }
>   fn [A, B](id: [A_2] (A_2) -> A_2, (x, y): (A, B)) -> (B, A) { (id(y), id(x)) }
> [A, B] ([A_2] (A_2) -> A_2, (A, B)) -> (B, A)

fn(id : [A](A) -> A, (x,y)) { (id(y),id(x)) }
> fn (id: [A] (A) -> A, (x, y)) { (id(y), id(x)) }
>   fn [A, B](id: [A_2] (A_2) -> A_2, (x, y): (B, A)) -> (A, B) { (id(y), id(x)) }
> [A, B] ([A_2] (A_2) -> A_2, (B, A)) -> (A, B)

fn[A](x : A) { if x.cond {x} else {x} }
> fn [A](x: A) { if x.cond { x } else { x } }
> error: incompat top [] <: record [18-24]

fn[A <: {cond:bool}](x : A) { if x.cond {x} else {x} }
> fn [A <: {cond: bool}](x: A) { if x.cond { x } else { x } }
>   fn [A <: {cond: bool}](x: A) -> A { if x.cond { x } else { x } }
> [A <: {cond: bool}] (A) -> A

fn(f) { fn[A](x : A) { f(x) } }
> fn (f) { fn [A](x: A) { f(x) } }
>   fn [A](f: (any) -> A) -> [A_2] (A_2) -> A { fn [A_2](x: A_2) -> A { f(x) } }
> [A] ((any) -> A) -> [A_2] (A_2) -> A

fn[A,B <: A](x : A) -> B { x }
> fn [A, B <: A](x: A) -> B { x }
> test:1: Bounds must be constructed types

fn[A,B <: A](x : B) -> A { x }
> fn [A, B <: A](x: B) -> A { x }
> test:1: Bounds must be constructed types

# contravariant join checks
fn[A,B](x : A|B) -> A|B {x}
> fn [A, B](x: A | B) -> A | B { x }
> typechecking error: Failure("contravariant join")

fn[A,B](x : (A|B) -> A) { fn(a){x(a)} }
> fn [A, B](x: (A | B) -> A) { fn (a) { x(a) } }
>   fn [A, B](x: (A | B) -> A) -> (nothing) -> A { fn (a: A | B) -> A { x(a) } }
> [A, B] ((A | B) -> A) -> (nothing) -> A

fn[A,B](x) -> (A|B) -> A {x}
> fn [A, B](x) -> (A | B) -> A { x }
> typechecking error: Failure("contravariant join")

fn[A,B](x) -> A|B {x}
> fn [A, B](x) -> A | B { x }
>   fn [A, B](x: nothing) -> A | B { x }
> [A, B] (nothing) -> A | B

fn[A,B](f : (A|B) -> A, x: B) -> ((A|B) -> A, B) { (f,x) }
> fn [A, B](f: (A | B) -> A, x: B) -> ((A | B) -> A, B) { (f, x) }
> typechecking error: Failure("contravariant join")

fn (f,x) { (fn(f, x) { let y = f(f(x)); (f, x) })(f,x) }
> fn (f, x) { (fn (f, x) { let y = f(f(x)); (f, x) })(f, x) }
>   fn [A, B, C <: (A | B) -> A](f: C, x: B) -> (C, B) {
>     (fn [A_2, B_2, C_2 <: (A_2 | B_2) -> A_2](f: C_2, x: B_2) -> (C_2, B_2) {
>       let y : A_2 = f(f(x));
>       (f, x)
>     })(f, x)
>   }
> [A, B, C <: (A | B) -> A] (C, B) -> (C, B)

fn[P,Q,R](f : (P|Q|R) -> P, x : Q) -> (((R) -> (P|R)), Q) { (f, x) }
> fn [P, Q, R](f: (P | Q | R) -> P, x: Q) -> (((R) -> (P | R)), Q) { (f, x) }
>   fn [P, Q, R](f: (P | Q | R) -> P, x: Q) -> ((R) -> P | R, Q) { (f, x) }
> [P, Q, R] ((P | Q | R) -> P, Q) -> ((R) -> P | R, Q)

fn (f,x) { (fn(f, x) { let y = f(f(x)); (fn(p){f(p)}, x) })(f,x) }


> fn (f, x) { (fn (f, x) { let y = f(f(x)); (fn (p) { f(p) }, x) })(f, x) }
>   fn [A, B, C](f: (A | B | C) -> A, x: C) -> ((B) -> A, C) {
>     (fn [A_2, B_2, C_2](f: (A_2 | B_2 | C_2) -> A_2, x: C_2) ->
>       ((B_2) -> A_2, C_2) {
>       let y : A_2 = f(f(x));
>       (fn (p: B_2) -> A_2 { f(p) }, x)
>     })(f, x)
>   }
> [A, B, C] ((A | B | C) -> A, C) -> ((B) -> A, C)
# partial poly
fn[A,C](a : A, b, c : C, d) { (a, b, c, d) }
> fn [A, C](a: A, b, c: C, d) { (a, b, c, d) }
>   fn [A, C, B, D](a: A, b: B, c: C, d: D) -> (A, B, C, D) { (a, b, c, d) }
> [A, C, B, D] (A, B, C, D) -> (A, B, C, D)

# real rank1 type (check forall not hoisted)
fn (a) { (fn(x) { (x, fn(x) { x }) })(a) }
> fn (a) { (fn (x) { (x, fn (x) { x }) })(a) }
>   fn [A](a: A) -> (A, [A_2] (A_2) -> A_2) {
>     (fn [A_2](x: A_2) -> (A_2, [A_3] (A_3) -> A_3) {
>       (x, fn [A_3](x: A_3) -> A_3 { x })
>     })(a)
>   }
> [A] (A) -> (A, [A_2] (A_2) -> A_2)

# bidir poly functions

(fn (x: A) { x } : [A] (A) -> A)
> (fn (x: A) { x } : [A] (A) -> A)
> test:1: Unknown type name: A

(fn (x: bool) { x } : [A] (A) -> A)
> (fn (x: bool) { x } : [A] (A) -> A)
> error: incompat top [] <: bool [8-12]

(fn (x: any) { x } : [A] (A) -> A)
> (fn (x: any) { x } : [A] (A) -> A)
> error: incompat top [8-11] <: bot []

(fn[B] (x: B) { x } : [A] (A) -> A)
> (fn [B](x: B) { x } : [A] (A) -> A)
>   (fn [B](x: B) -> B { x } : [A] (A) -> A)
> [A] (A) -> A

(fn[B] (x) { (x : B) } : [A] (A) -> A)
> (fn [B](x) { (x : B) } : [A] (A) -> A)
>   (fn [B](x: B) -> B { (x : B) } : [A] (A) -> A)
> [A] (A) -> A

(fn[B] (x) -> B { (x : B) } : [A] (A) -> A)
> (fn [B](x) -> B { (x : B) } : [A] (A) -> A)
>   (fn [B](x: B) -> B { (x : B) } : [A] (A) -> A)
> [A] (A) -> A

fn[B <: {foo:int}] (x) -> B { x }
> fn [B <: {foo: int}](x) -> B { x }
>   fn [B <: {foo: int}](x: B) -> B { x }
> [B <: {foo: int}] (B) -> B

fn[B <: {foo:int}] (x) { (x : B) }
> fn [B <: {foo: int}](x) { (x : B) }
>   fn [B <: {foo: int}](x: B) -> B { (x : B) }
> [B <: {foo: int}] (B) -> B

(fn() { @true } : [A]() -> bool)
> (fn () { @true } : [A] () -> bool)
>   (fn () { @true } : [A] () -> bool)
> [A] () -> bool

fn(id, x) { (id(x), id(5)) }
> fn (id, x) { (id(x), id(5)) }
>   fn [A, B](id: (int | B) -> A, x: B) -> (A, A) { (id(x), id(5)) }
> [A, B] ((int | B) -> A, B) -> (A, A)

(fn(id, x) { (id(x), id(5)) } : [A]([B](B) -> B, A) -> (A,int))
> (fn (id, x) { (id(x), id(5)) } : [A] ([B] (B) -> B, A) -> (A, int))
>   (fn (id, x) { (id(x), id(5)) } : [A] ([B] (B) -> B, A) -> (A, int))
> [A] ([B] (B) -> B, A) -> (A, int)

fn[A,B](x:A, y:B) { if true { x } else { y } }
> fn [A, B](x: A, y: B) { if true { x } else { y } }
>   fn [A, B](x: A, y: B) -> A | B { if true { x } else { y } }
> [A, B] (A, B) -> A | B

fn[A,B](x : A, y : B) -> A|B { if true { x } else { y } }
> fn [A, B](x: A, y: B) -> A | B { if true { x } else { y } }
>   fn [A, B](x: A, y: B) -> A | B { if true { x } else { y } }
> [A, B] (A, B) -> A | B

let ch = fn[A,B](x : A, y : B) -> A|B { if true { x } else { y } }; ch
> let ch = fn [A, B](x: A, y: B) -> A | B { if true { x } else { y } }; ch
>   let ch : [A, B] (A, B) -> A | B =
>   fn [A, B](x: A, y: B) -> A | B { if true { x } else { y } };
>   ch
> [A, B] (A, B) -> A | B

let ch = fn[A,B](x : A, y : B) -> A|B { if true { x } else { y } }; fn (a,b) { ch(a, b) }
> let ch = fn [A, B](x: A, y: B) -> A | B { if true { x } else { y } };
> fn (a, b) {
>   ch(a, b)
> }
>   let ch : [A, B] (A, B) -> A | B =
>   fn [A, B](x: A, y: B) -> A | B { if true { x } else { y } };
>   fn [A, B](a: A, b: B) -> A | B {
>     ch(a, b)
>   }
> [A, B] (A, B) -> A | B

(fn[A,B](x : A, y : B) -> A|B { if true { x } else { y } } : [A] (A, A) -> A)
> (fn [A, B](x: A, y: B) -> A | B { if true { x } else { y } } : [A] (A, A) -> A)
>   (fn [A, B](x: A, y: B) -> A | B { if true { x } else { y } } : [A] (A, A) -> A)
> [A] (A, A) -> A

(fn[A,B,R](x : A, y : B) -> A|B|R { if true { x } else { y } } : [A] (A, A) -> A)
> (fn [A, B, R](x: A, y: B) -> A | B | R {
>   if true {
>     x
>   } else {
>     y
>   }
> } : [A] (A, A) -> A)
>   (fn [A, B, R](x: A, y: B) -> A | B | R {
>     if true {
>       x
>     } else {
>       y
>     }
>   } : [A] (A, A) -> A)
> [A] (A, A) -> A

(fn[A,B,R](x : A, y : B) -> R|A { if true { x } else { y } } : [A] (A, A) -> A)
> (fn [A, B, R](x: A, y: B) -> R | A {
>   if true {
>     x
>   } else {
>     y
>   }
> } : [A] (A, A) -> A)
> error: incompat top [] <: bot []

(fn[A,B,R](x : A, y : B) -> R|A { x } : [A] (A, A) -> A)
> (fn [A, B, R](x: A, y: B) -> R | A { x } : [A] (A, A) -> A)
>   (fn [A, B, R](x: A, y: B) -> A | R { x } : [A] (A, A) -> A)
> [A] (A, A) -> A

# debugging

let wid = fn (id: [B]({foo:B}) -> B) { id({foo:5}) }; fn(f) { wid(fn(x){f(5); x.foo}) }
> let wid = fn (id: [B] ({foo: B}) -> B) { id({foo: 5}) };
> fn (f) {
>   wid(fn (x) { f(5); x.foo })
> }
>   let wid : ([B] ({foo: B}) -> B) -> int =
>   fn (id: [B] ({foo: B}) -> B) -> int { id({foo: 5}) };
>   fn (f: (int) -> ()) -> int {
>     wid(fn (x) { f(5); x.foo })
>   }
> ((int) -> ()) -> int


# making this work requires an annotation on f, due to hoisting
# (by design, but a bit weird)
let wid = fn (id: [B]({foo:B}) -> B) { id({foo:5}) }; fn(f) { let g = (fn(x){f(x); x.foo}); wid(g) }
> let wid = fn (id: [B] ({foo: B}) -> B) { id({foo: 5}) };
> fn (f) {
>   let g = (fn (x) { f(x); x.foo });
>   wid(g)
> }
> error: incompat top [] <: bot []

# works in checking mode (bidir)
let wid = fn (id: [B]({foo:B}) -> B) { id({foo:5}) }; fn(f) { wid(fn(x){f(x); x.foo}) }
> let wid = fn (id: [B] ({foo: B}) -> B) { id({foo: 5}) };
> fn (f) {
>   wid(fn (x) { f(x); x.foo })
> }
>   let wid : ([B] ({foo: B}) -> B) -> int =
>   fn (id: [B] ({foo: B}) -> B) -> int { id({foo: 5}) };
>   fn (f: ({foo: any}) -> ()) -> int {
>     wid(fn (x) { f(x); x.foo })
>   }
> (({foo: any}) -> ()) -> int

let wid = fn (id: [B]({foo:B}) -> B) { id({foo:5}) }; fn(f : (any) -> ()) { wid(fn(x){f(x); x.foo}) }
> let wid = fn (id: [B] ({foo: B}) -> B) { id({foo: 5}) };
> fn (f: (any) -> ()) {
>   wid(fn (x) { f(x); x.foo })
> }
>   let wid : ([B] ({foo: B}) -> B) -> int =
>   fn (id: [B] ({foo: B}) -> B) -> int { id({foo: 5}) };
>   fn (f: (any) -> ()) -> int {
>     wid(fn (x) { f(x); x.foo })
>   }
> ((any) -> ()) -> int


let wid = fn (id: [B,A <: {foo:B}](A) -> B) { id({foo:5}) }; fn(f) { let g = (fn(x){let z = f({bar:x}); x.foo}); wid(g) }
> let wid = fn (id: [B, A <: {foo: B}] (A) -> B) { id({foo: 5}) };
> fn (f) {
>   let g = (fn (x) { let z = f({bar: x}); x.foo });
>   wid(g)
> }
> error: incompat top [] <: bot []

let wid = fn (id: [B,A <: {foo:B}](A) -> B) { id({foo:5}) }; fn(f) { wid(fn(x){let z = f({bar:x}); x.foo}) }
> let wid = fn (id: [B, A <: {foo: B}] (A) -> B) { id({foo: 5}) };
> fn (f) {
>   wid(fn (x) { let z = f({bar: x}); x.foo })
> }
>   let wid : ([B, A <: {foo: B}] (A) -> B) -> int =
>   fn (id: [B, A <: {foo: B}] (A) -> B) -> int { id({foo: 5}) };
>   fn [A](f: ({bar: {foo: any}}) -> A) -> int {
>     wid(fn (x) { let z : A = f({bar: x}); x.foo })
>   }
> [A] (({bar: {foo: any}}) -> A) -> int

let wid = fn (id: [B,A <: {foo:B}](A) -> B) { id({foo:5}) }; fn(f : (any) -> string) { wid(fn(x){let z = f({bar:x}); x.foo}) }
> let wid = fn (id: [B, A <: {foo: B}] (A) -> B) { id({foo: 5}) };
> fn (f: (any) -> string) {
>   wid(fn (x) { let z = f({bar: x}); x.foo })
> }
>   let wid : ([B, A <: {foo: B}] (A) -> B) -> int =
>   fn (id: [B, A <: {foo: B}] (A) -> B) -> int { id({foo: 5}) };
>   fn (f: (any) -> string) -> int {
>     wid(fn (x) { let z : string = f({bar: x}); x.foo })
>   }
> ((any) -> string) -> int

let id = fn(x) { x }; fn () { (id (id), id) }
> let id = fn (x) { x }; fn () { (id(id), id) }
>   let id : [A] (A) -> A = fn [A](x: A) -> A { x };
>   fn [A]() -> ((A) -> A, [A_2] (A_2) -> A_2) {
>     (id(id), id)
>   }
> [A] () -> ((A) -> A, [A_2] (A_2) -> A_2)


fn(f) { fn(id: [A] (A) -> A) { let x = f(id); id(1) } }
> fn (f) { fn (id: [A] (A) -> A) { let x = f(id); id(1) } }
>   fn [A, B](f: ((B) -> B) -> A) -> ([A_2] (A_2) -> A_2) -> int {
>     fn (id: [A_2] (A_2) -> A_2) -> int {
>       let x : A = f(id);
>       id(1)
>     }
>   }
> [A, B] (((B) -> B) -> A) -> ([A_2] (A_2) -> A_2) -> int

fn(f) { fn(id: [A] (A) -> A) { id(fn(y) { let x = f(y); y }) } }
> fn (f) { fn (id: [A] (A) -> A) { id(fn (y) { let x = f(y); y }) } }
>   fn [A, B](f: (A) -> B) -> ([A_2] (A_2) -> A_2) -> (A) -> A {
>     fn (id: [A_2] (A_2) -> A_2) -> (A) -> A {
>       id(fn (y: A) -> A { let x : B = f(y); y })
>     }
>   }
> [A, B] ((A) -> B) -> ([A_2] (A_2) -> A_2) -> (A) -> A


(fn(x) {(fn(y){y})(x)} : [A] (A) -> A)
> (fn (x) { (fn (y) { y })(x) } : [A] (A) -> A)
>   (fn (x) { (fn [A](y: A) -> A { y })(x) } : [A] (A) -> A)
> [A] (A) -> A

let id = fn(y) { y }; (fn[A](x : A) {id(x)})
> let id = fn (y) { y }; (fn [A](x: A) { id(x) })
>   let id : [A] (A) -> A = fn [A](y: A) -> A { y }; (fn [A](x: A) -> A { id(x) })
> [A] (A) -> A

let id = fn(y) { y }; (fn(x) {id(x)} : [A] (A) -> A)
> let id = fn (y) { y }; (fn (x) { id(x) } : [A] (A) -> A)
>   let id : [A] (A) -> A = fn [A](y: A) -> A { y };
>   (fn (x) { id(x) } : [A] (A) -> A)
> [A] (A) -> A


fn[A,B](x : [X <: B](X|A) -> X) -> (A) -> B { x }
> fn [A, B](x: [X <: B] (X | A) -> X) -> (A) -> B { x }
> test:1: Bounds must be constructed types

fn[A,B](x : [X <: B](X|A) -> X) -> (A) -> A|B { x }
> fn [A, B](x: [X <: B] (X | A) -> X) -> (A) -> A | B { x }
> test:1: Bounds must be constructed types

# wtf:
# fn[A,B,A <: B](x : [X, X <: A, X :> B](X) -> X) -> [X <: A, Y :> B, X <: Y](X) -> Y { x }
# > parser failure: bad parse


# some invalid types that should be rejected because of bad joins
(@bot : [A] [B] ({foo: B} | A))
> (@bot : [A] [B] ({foo: B} | A))
> test:1: Rigid variable B not allowed in join with variable bound earlier

(@bot : [A, B] (int, [C] ({foo: int | C} | B)))
> (@bot : [A, B] (int, [C] ({foo: int | C} | B)))
> test:1: Rigid variable C not allowed in join with variable bound earlier

(@bot : [A <: [B]int]int)
> (@bot : [A <: [B] int] int)
> test:1: Bounds must be constructed types

# bug in substn_ntyp
fn[A](id: [B](A) -> int) { id }
> fn [A](id: [B] (A) -> int) { id }
>   fn [A](id: [B] (A) -> int) -> [B] (A) -> int { id }
> [A] ([B] (A) -> int) -> [B] (A) -> int

fn[A](id: [B](A, B) -> int, x:A) -> int {id(x,1)}
> fn [A](id: [B] (A, B) -> int, x: A) -> int { id(x, 1) }
>   fn [A](id: [B] (A, B) -> int, x: A) -> int { id(x, 1) }
> [A] ([B] (A, B) -> int, A) -> int

# If this fails someday due to unannoted x/ret, that's fine
fn[A](id: [B](A, B) -> (A, B), x){id(x,1)}
> fn [A](id: [B] (A, B) -> (A, B), x) { id(x, 1) }
>   fn [A](id: [B] (A, B) -> (A, B), x: A) -> (A, int) { id(x, 1) }
> [A] ([B] (A, B) -> (A, B), A) -> (A, int)

(fn[A](id: (A) -> (nothing)){id})(fn(a){a})
> (fn [A](id: (A) -> (nothing)) { id })(fn (a) { a })
>   (fn [A](id: (A) -> nothing) -> (A) -> nothing { id })(fn (a) { a })
> (nothing) -> nothing

# another bug
let f = fn[A](id: (A) -> A){1}; f(fn(a){a})
> let f = fn [A](id: (A) -> A) { 1 }; f(fn (a) { a })
>   let f : [A] ((A) -> A) -> int = fn [A](id: (A) -> A) -> int { 1 };
>   f(fn (a) { a })
> int

let f = fn[A](id: [B](A, B) -> (A, B), x:A){id(x,1)}; fn(z){ f(fn(a,b){(a,b)}, if z.cond {z.a}else{z.b}) }
> let f = fn [A](id: [B] (A, B) -> (A, B), x: A) { id(x, 1) };
> fn (z) {
>   f(fn (a, b) { (a, b) }, if z.cond { z.a } else { z.b })
> }
>   let f : [A] ([B] (A, B) -> (A, B), A) -> (A, int) =
>   fn [A](id: [B] (A, B) -> (A, B), x: A) -> (A, int) { id(x, 1) };
>   fn [A](z: {cond: bool, a: A, b: A, ...}) -> (A, int) {
>     f(fn (a, b) { (a, b) }, if z.cond { z.a } else { z.b })
>   }
> [A] ({cond: bool, a: A, b: A, ...}) -> (A, int)

# test match_simple_typ with complex upper bound
let appf = fn[B, C, A <: (B) -> C](f : A, x : B) { f(x) }; fn() { appf(fn(x) { x }, 1) }
> let appf = fn [B, C, A <: (B) -> C](f: A, x: B) { f(x) };
> fn () {
>   appf(fn (x) { x }, 1)
> }
>   let appf : [B, C, A <: (B) -> C] (A, B) -> C =
>   fn [B, C, A <: (B) -> C](f: A, x: B) -> C { f(x) };
>   fn () -> int {
>     appf(fn [A](x: A) -> A { x }, 1)
>   }
> () -> int

let appf = fn[B, C, A <: (B) -> C](f : A, x : B) { f(x) }; fn() { appf(fn(x) { 1 }, 1) }
> let appf = fn [B, C, A <: (B) -> C](f: A, x: B) { f(x) };
> fn () {
>   appf(fn (x) { 1 }, 1)
> }
>   let appf : [B, C, A <: (B) -> C] (A, B) -> C =
>   fn [B, C, A <: (B) -> C](f: A, x: B) -> C { f(x) };
>   fn () -> int {
>     appf(fn (x: any) -> int { 1 }, 1)
>   }
> () -> int

let appf = fn[B, C, A <: (B) -> C](f : A, x : B) { f(x) }; fn() { appf(3, 1) }
> let appf = fn [B, C, A <: (B) -> C](f: A, x: B) { f(x) }; fn () { appf(3, 1) }
> test:1: Type error
>   let appf = fn[B, C, A <: (B) -> C](f : A, x : B) { f(x) }; fn() { appf(3, 1) }
>                                                                          ^
> The type int does not match type (_) -> _ from test:1:
>   let appf = fn[B, C, A <: (B) -> C](f : A, x : B) { f(x) }; fn() { appf(3, 1) }
>                            ^^^^^^^^

# approx_ntyp
fn[P, Q <: {foo:P}] (x) -> [A, B <: {bar: Q}, C <: {x:B, y:Q}] (A, B, C) -> (A, B|(P,Q), C) { x }
> fn [P, Q <: {foo: P}](x) ->
>   [A, B <: {bar: Q}, C <: {x: B, y: Q}] (A, B, C) -> (A, B | (P, Q), C) {
>   x
> }
>   fn [P, Q <: {foo: P}](
>     x: (any, {bar: Q}, {x: {bar: Q}, y: Q}) -> (nothing, (P, Q), nothing)
>   ) -> [A, B <: {bar: Q}, C <: {x: B, y: Q}] (A, B, C) -> (A, (P, Q) | B, C) {
>     x
>   }
> [P, Q <: {foo: P}] ((any, {bar: Q}, {x: {bar: Q}, y: Q}) -> (nothing, (P, Q), nothing)) ->
> [A, B <: {bar: Q}, C <: {x: B, y: Q}] (A, B, C) -> (A, (P, Q) | B, C)

# more approx_ntyp
let f = fn (f: [B <: {foo:int,...}, A <: {bar:B}](A) -> A|B, g) { g(f) }; fn() { (fn(x){x})(f) }
> let f = fn (f: [B <: {foo: int, ...}, A <: {bar: B}] (A) -> A | B, g) { g(f) };
> fn () {
>   (fn (x) { x })(f)
> }
>   let f : [A, B <: {foo: int, ...}, C <: {bar: B}] (
>     [B_2 <: {foo: int, ...}, A_2 <: {bar: B_2}] (A_2) -> A_2 | B_2,
>     ((C) -> B | C) -> A
>   ) -> A =
>   fn [A, B <: {foo: int, ...}, C <: {bar: B}](
>     f: [B_2 <: {foo: int, ...}, A_2 <: {bar: B_2}] (A_2) -> A_2 | B_2,
>     g: ((C) -> B | C) -> A
>   ) -> A {
>     g(f)
>   };
>   fn [A, B <: {foo: int, ...}, C <: {bar: B}]() ->
>     (({bar: {foo: int, ...}}) -> nothing, ((C) -> B | C) -> A) -> A {
>     (fn [A_2](x: A_2) -> A_2 { x })(f)
>   }
> [A, B <: {foo: int, ...}, C <: {bar: B}] () -> (({bar: {foo: int, ...}}) -> nothing, ((C) -> B | C) -> A) -> A

fn (f: [B <: {foo:int,...}, A <: {bar:B}](A) -> A|B, g) { g(f) }
> fn (f: [B <: {foo: int, ...}, A <: {bar: B}] (A) -> A | B, g) { g(f) }
>   fn [A, B <: {foo: int, ...}, C <: {bar: B}](
>     f: [B_2 <: {foo: int, ...}, A_2 <: {bar: B_2}] (A_2) -> A_2 | B_2,
>     g: ((C) -> B | C) -> A
>   ) -> A {
>     g(f)
>   }
> [A, B <: {foo: int, ...}, C <: {bar: B}] (
>   [B_2 <: {foo: int, ...}, A_2 <: {bar: B_2}] (A_2) -> A_2 | B_2,
>   ((C) -> B | C) -> A
> ) -> A

# wfrig check in ensure_upper_matches
fn[A <: {foo:int}](a: A) { let id = fn(x) { x }; id(a).foo }
> fn [A <: {foo: int}](a: A) { let id = fn (x) { x }; id(a).foo }
>   fn [A <: {foo: int}](a: A) -> int {
>     let id : [B] (B) -> B = fn [B](x: B) -> B { x };
>     id(a).foo
>   }
> [A <: {foo: int}] (A) -> int

# multi upper bounds & specsub (somewhat dodgy)
fn[A <: {foo:int}, B <: {bar:int}](x) -> {a:A, b:{foo:int}|B} {
  let splat = fn(x) { {a:x, b:x} }; splat(x)
}
> fn [A <: {foo: int}, B <: {bar: int}](x) -> {a: A, b: {foo: int} | B} {
>   let splat = fn (x) { {a: x, b: x} };
>   splat(x)
> }
>   fn [A <: {foo: int}, B <: {bar: int}](x: nothing) -> {a: A, b: {foo: int} | B} {
>     let splat : [C] (C) -> {a: C, b: C} =
>     fn [C](x: C) -> {a: C, b: C} { {a: x, b: x} };
>     splat(x)
>   }
> [A <: {foo: int}, B <: {bar: int}] (nothing) -> {a: A, b: {foo: int} | B}


# weirdness: non-monotonicity wrt annotations

fn[A <: {foo:int}, B <: {bar:bool}](x) -> {a:{bar:bool}|A, b:{foo:int}|B, c:{foo:int}} {
  {a:x, b:x, c:x}
}
> fn [A <: {foo: int}, B <: {bar: bool}](x) ->
>   {a: {bar: bool} | A, b: {foo: int} | B, c: {foo: int}} {
>   {a: x, b: x, c: x}
> }
>   fn [A <: {foo: int}, B <: {bar: bool}](x: nothing) ->
>     {a: {bar: bool} | A, b: {foo: int} | B, c: {foo: int}} {
>     {a: x, b: x, c: x}
>   }
> [A <: {foo: int}, B <: {bar: bool}] (nothing) -> {a: {bar: bool} | A, b: {foo: int} | B, c: {foo: int}}

fn[A <: {foo:int}, B <: {bar:bool}](x) -> {a:{bar:bool}|A, b:{foo:int}|B, c:any} {
  {a:x, b:x, c:x}
}
> fn [A <: {foo: int}, B <: {bar: bool}](x) ->
>   {a: {bar: bool} | A, b: {foo: int} | B, c: any} {
>   {a: x, b: x, c: x}
> }
>   fn [A <: {foo: int}, B <: {bar: bool}](x: nothing) ->
>     {a: {bar: bool} | A, b: {foo: int} | B, c: any} {
>     {a: x, b: x, c: x}
>   }
> [A <: {foo: int}, B <: {bar: bool}] (nothing) -> {a: {bar: bool} | A, b: {foo: int} | B, c: any}


# why doesn't this work?
fn[A <: {foo:int}, B <: {bar:bool}](x) -> {a:{bar:bool}|A, b:{foo:int}|A|B, c:any} {
  {a:x, b:x, c:x}
}
> fn [A <: {foo: int}, B <: {bar: bool}](x) ->
>   {a: {bar: bool} | A, b: {foo: int} | A | B, c: any} {
>   {a: x, b: x, c: x}
> }
>   fn [A <: {foo: int}, B <: {bar: bool}](x: A) ->
>     {a: {bar: bool} | A, b: {foo: int} | B, c: any} {
>     {a: x, b: x, c: x}
>   }
> [A <: {foo: int}, B <: {bar: bool}] (A) -> {a: {bar: bool} | A, b: {foo: int} | B, c: any}

fn[A](x: any, y:A) { if true {x} else {y} }
> fn [A](x: any, y: A) { if true { x } else { y } }
>   fn [A](x: any, y: A) -> any { if true { x } else { y } }
> [A] (any, A) -> any


fn(x, y, k1, k2, k3) {
  let ch = fn[X](a:X,b:X){if true {a} else {b}};
  let z = ch(x, y)(fn(x){k1(x)});
  (x(k2), y(k3))
}
> fn (x, y, k1, k2, k3) {
>   let ch = fn [X](a: X, b: X) { if true { a } else { b } };
>   let z = ch(x, y)(fn (x) { k1(x) });
>   (x(k2), y(k3))
> }
>   fn [A, B, C, D, E, F](
>     x: (((D) -> C) | E) -> A,
>     y: (((D) -> C) | F) -> B,
>     k1: (D) -> C,
>     k2: E,
>     k3: F
>   ) -> (A, B) {
>     let ch : [X] (X, X) -> X =
>     fn [X](a: X, b: X) -> X { if true { a } else { b } };
>     let z : A | B = ch(x, y)(fn (x: D) -> C { k1(x) });
>     (x(k2), y(k3))
>   }
> [A, B, C, D, E, F] ((((D) -> C) | E) -> A, (((D) -> C) | F) -> B, (D) -> C, E, F) -> (A, B)


# flex_cons_upper freshening matchability bug
fn(x, y) {
  let ch = fn[X](a:X,b:X){if true {a} else {b}};
  let z = ch(x, y).bar;
  (x.bar, y.bar)
}
> fn (x, y) {
>   let ch = fn [X](a: X, b: X) { if true { a } else { b } };
>   let z = ch(x, y).bar;
>   (x.bar, y.bar)
> }
>   fn [A, B](x: {bar: A, ...}, y: {bar: B, ...}) -> (A, B) {
>     let ch : [X] (X, X) -> X =
>     fn [X](a: X, b: X) -> X { if true { a } else { b } };
>     let z : A | B = ch(x, y).bar;
>     (x.bar, y.bar)
>   }
> [A, B] ({bar: A, ...}, {bar: B, ...}) -> (A, B)

# version that actually fails if bug present
fn(y) {
  let ch = fn[X](a:X,b:X){if true {a} else {b}};
  let z = ch({bar:true}, y).bar;
  (y.bar : int)
}
> fn (y) {
>   let ch = fn [X](a: X, b: X) { if true { a } else { b } };
>   let z = ch({bar: true}, y).bar;
>   (y.bar : int)
> }
>   fn [A <: int](y: {bar: A, ...}) -> int {
>     let ch : [X] (X, X) -> X =
>     fn [X](a: X, b: X) -> X { if true { a } else { b } };
>     let z : bool | A = ch({bar: true}, y).bar;
>     (y.bar : int)
>   }
> [A <: int] ({bar: A, ...}) -> int

# same bug, in CPSish style (for nonstrictly positive vars)
# tricky case requiring duplication of non-strictly-covariant vars in flex_cons_upper
fn (x, y, k1, k2, k3) {
  let use = fn [P](a : ((P) -> int) -> int) { a(k1) };
  let ch = fn [X](a : X, b : X) { if true { a } else { b } };
  let z = use(ch(x, y));
  ((x : ((int) -> int) -> int), y)
}
> fn (x, y, k1, k2, k3) {
>   let use = fn [P](a: ((P) -> int) -> int) { a(k1) };
>   let ch = fn [X](a: X, b: X) { if true { a } else { b } };
>   let z = use(ch(x, y));
>   ((x : ((int) -> int) -> int), y)
> }
>   fn [A <: ((any) -> int) -> int](
>     x: ((int) -> int) -> int,
>     y: A,
>     k1: (any) -> int,
>     k2: any,
>     k3: any
>   ) -> (((int) -> int) -> int, A) {
>     let use : [P] (((P) -> int) -> int) -> int =
>     fn [P](a: ((P) -> int) -> int) -> int { a(k1) };
>     let ch : [X] (X, X) -> X =
>     fn [X](a: X, b: X) -> X { if true { a } else { b } };
>     let z : int = use(ch(x, y));
>     ((x : ((int) -> int) -> int), y)
>   }
> [A <: ((any) -> int) -> int] (((int) -> int) -> int, A, (any) -> int, any, any) -> (((int) -> int) -> int, A)


fn (x, y, k) {
  let ch = fn[X](a:X,b:X){if true {a} else {b}};
  let z = ch(x,y)(fn (a) {let z : int = k(a); 1});
  (x(fn(x) { x }), y(fn (x) { x}))
}
> fn (x, y, k) {
>   let ch = fn [X](a: X, b: X) { if true { a } else { b } };
>   let z = ch(x, y)(fn (a) { let z : int = k(a); 1 });
>   (x(fn (x) { x }), y(fn (x) { x }))
> }
>   fn [A, B, C, D, E, F, G](
>     x: ((D) -> int | C | D) -> A,
>     y: ((F) -> int | E | F) -> B,
>     k: (D | F | G) -> int
>   ) -> (A, B) {
>     let ch : [X] (X, X) -> X =
>     fn [X](a: X, b: X) -> X { if true { a } else { b } };
>     let z : A | B =
>     ch(x, y)(fn (a: D | F | G) -> int { let z : int = k(a); 1 });
>     (x(fn [A_2](x: A_2) -> A_2 { x }), y(fn [A_2](x: A_2) -> A_2 { x }))
>   }
> [A, B, C, D, E, F, G] (((D) -> int | C | D) -> A, ((F) -> int | E | F) -> B, (D | F | G) -> int) -> (A, B)

fn  [A](a) -> A { let x = a; x }
> fn [A](a) -> A { let x = a; x }
>   fn [A](a: A) -> A { let x : A = a; x }
> [A] (A) -> A

fn [A](x:A, f:[B <: A](B) -> B) { x }


> fn [A](x: A, f: [B <: A] (B) -> B) { x }
> test:1: Bounds must be constructed types
> STATS: fix: 79, flex: 3043
